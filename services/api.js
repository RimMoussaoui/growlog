import AsyncStorage from "@react-native-async-storage/async-storage"
import { isOnline, addToOfflineQueue, getOfflineQueue, removeFromOfflineQueue } from "./network"

// URL de base de l'API
const API_BASE_URL = "https://back-api-dlu0.onrender.com/api"

// Cl√© pour le stockage du token d'authentification
const AUTH_TOKEN_KEY = "authToken"

// Cl√© pour le cache des donn√©es
const CACHE_PREFIX = "api_cache_"

// Cl√© pour le stockage local de l'historique
const HISTORY_PREFIX = "tree_history_"

/**
 * Effectue une requ√™te HTTP
 * @param {string} method - M√©thode HTTP (GET, POST, PUT, DELETE)
 * @param {string} url - URL de l'API
 * @param {Object} data - Donn√©es √† envoyer (pour POST et PUT)
 * @param {Object} options - Options suppl√©mentaires pour la requ√™te
 * @returns {Promise<Object>} - R√©ponse de l'API
 */
async function request(method, url, data = null, options = {}) {
  const online = await isOnline()
  const headers = {
    "Content-Type": "application/json",
    // Ajoutez ici d'autres en-t√™tes communs, comme l'autorisation
  }

  // R√©cup√©rer le token d'authentification
  const authToken = await AsyncStorage.getItem(AUTH_TOKEN_KEY)
  if (authToken) {
    headers["Authorization"] = `Bearer ${authToken}`
  }

  const requestOptions = {
    method,
    headers,
    ...(data ? { body: JSON.stringify(data) } : {}),
    ...options,
  }

  try {
    console.log(`[API] ${method} ${url}`, data || "")

    if (!online) {
      console.warn(`[API] üì¥ Mode hors ligne, mise en file d'attente de la requ√™te: ${method} ${url}`)

      const entityId = options.entityId || `${method}_${url}_${Date.now()}`
      await addToOfflineQueue({ method, url, data, options, entityId })

      return { _queued: true, _pendingSync: true, message: "Requ√™te mise en file d'attente (hors ligne)" }
    }

    const controller = new AbortController()
    const timeoutId = setTimeout(() => controller.abort(), 15000) // Timeout de 15 secondes

    const response = await fetch(`${API_BASE_URL}${url}`, {
      ...requestOptions,
      signal: controller.signal,
    })

    clearTimeout(timeoutId)

    const responseData = await response.json()

    if (!response.ok) {
      console.error(`[API] Erreur ${method} ${url}:`, response.status, responseData)
      return { _error: true, status: response.status, message: responseData.message || "Erreur API" }
    }

    console.log(`[API] ${method} ${url} - R√©ponse:`, responseData)
    return responseData
  } catch (error) {
    console.error(`[API] Erreur ${method} ${url}:`, error)

    if (error.name === "AbortError") {
      return { _error: true, message: "Timeout de la requ√™te" }
    }

    if (!online) {
      console.warn(`[API] üì¥ Mode hors ligne, l'erreur est due √† la d√©connexion: ${method} ${url}`)
      return { _error: true, message: "Hors ligne" }
    }

    return { _error: true, message: error.message || "Erreur lors de la requ√™te" }
  }
}

/**
 * Met en cache les donn√©es de l'API
 * @param {string} endpoint - Point de terminaison de l'API
 * @param {Object} data - Donn√©es √† mettre en cache
 */
async function cacheData(endpoint, data) {
  try {
    const cacheKey = endpoint.replace(/[^a-zA-Z0-9]/g, "_") // Nettoyer l'endpoint pour l'utiliser comme cl√©
    const cacheEntry = {
      data,
      timestamp: Date.now(),
    }
    await AsyncStorage.setItem(`${CACHE_PREFIX}${cacheKey}`, JSON.stringify(cacheEntry))
    console.log(`[API] üíæ Donn√©es mises en cache pour ${endpoint}`)
  } catch (error) {
    console.error(`[API] Erreur lors de la mise en cache de ${endpoint}:`, error)
  }
}

/**
 * R√©cup√®re les donn√©es en cache
 * @param {string} endpoint - Point de terminaison de l'API
 * @returns {Object|null} - Donn√©es en cache ou null
 */
async function getCachedData(endpoint) {
  try {
    const cacheKey = endpoint.replace(/[^a-zA-Z0-9]/g, "_")
    const cachedEntry = await AsyncStorage.getItem(`${CACHE_PREFIX}${cacheKey}`)

    if (cachedEntry) {
      const parsed = JSON.parse(cachedEntry)
      const age = Date.now() - parsed.timestamp
      const maxAge = 5 * 60 * 1000 // 5 minutes

      if (age < maxAge) {
        return parsed.data
      } else {
        await AsyncStorage.removeItem(`${CACHE_PREFIX}${cacheKey}`)
        console.log(`[API] üóëÔ∏è Cache expir√© pour ${endpoint}`)
      }
    }

    return null
  } catch (error) {
    console.error(`[API] Erreur lors de la r√©cup√©ration du cache pour ${endpoint}:`, error)
    return null
  }
}

/**
 * Ajoute une entr√©e √† l'historique local
 * @param {string} treeId - ID de l'arbre
 * @param {Object} entry - Entr√©e d'historique
 */
async function addLocalHistoryEntry(treeId, entry) {
  try {
    const historyKey = `${HISTORY_PREFIX}${treeId}`
    const existingHistory = await AsyncStorage.getItem(historyKey)
    const history = existingHistory ? JSON.parse(existingHistory) : []

    // Ajouter l'entr√©e √† l'historique
    history.push(entry)

    // Sauvegarder l'historique mis √† jour
    await AsyncStorage.setItem(historyKey, JSON.stringify(history))
    console.log(`[API] üíæ Entr√©e d'historique ajout√©e localement pour l'arbre ${treeId}`)
  } catch (error) {
    console.error(`[API] Erreur lors de l'ajout de l'entr√©e d'historique locale pour l'arbre ${treeId}:`, error)
  }
}

/**
 * R√©cup√®re l'historique local
 * @param {string} treeId - ID de l'arbre
 * @param {string} year - Ann√©e de l'historique (optionnel)
 * @returns {Array} - Historique local
 */
async function getLocalHistory(treeId, year = null) {
  try {
    const historyKey = `${HISTORY_PREFIX}${treeId}`
    const existingHistory = await AsyncStorage.getItem(historyKey)

    if (existingHistory) {
      let history = JSON.parse(existingHistory)

      // Filtrer par ann√©e si sp√©cifi√©e
      if (year) {
        history = history.filter((entry) => new Date(entry.date).getFullYear() === Number.parseInt(year))
      }

      return history
    }

    return null
  } catch (error) {
    console.error(`[API] Erreur lors de la r√©cup√©ration de l'historique local pour l'arbre ${treeId}:`, error)
    return null
  }
}

/**
 * Sauvegarde l'historique local
 * @param {string} treeId - ID de l'arbre
 * @param {Array} history - Historique √† sauvegarder
 */
async function saveLocalHistory(treeId, history) {
  try {
    const historyKey = `${HISTORY_PREFIX}${treeId}`
    await AsyncStorage.setItem(historyKey, JSON.stringify(history))
    console.log(`[API] üíæ Historique local sauvegard√© pour l'arbre ${treeId}`)
  } catch (error) {
    console.error(`[API] Erreur lors de la sauvegarde de l'historique local pour l'arbre ${treeId}:`, error)
  }
}

/**
 * Supprime une entr√©e de l'historique local
 * @param {string} treeId - ID de l'arbre
 * @param {string} year - Ann√©e de l'entr√©e
 * @param {string} timestamp - Timestamp de l'entr√©e
 */
async function removeLocalHistoryEntry(treeId, year, timestamp) {
  try {
    const historyKey = `${HISTORY_PREFIX}${treeId}`
    const existingHistory = await AsyncStorage.getItem(historyKey)

    if (existingHistory) {
      let history = JSON.parse(existingHistory)

      // Filtrer pour exclure l'entr√©e √† supprimer
      history = history.filter((entry) => {
        const entryYear = new Date(entry.date).getFullYear().toString()
        const entryTimestamp = entry.timestamp.toString()
        return !(entryYear === year && entryTimestamp === timestamp)
      })

      // Sauvegarder l'historique mis √† jour
      await AsyncStorage.setItem(historyKey, JSON.stringify(history))
      console.log(`[API] üóëÔ∏è Entr√©e d'historique supprim√©e localement pour l'arbre ${treeId}`)
    }
  } catch (error) {
    console.error(`[API] Erreur lors de la suppression de l'entr√©e d'historique locale pour l'arbre ${treeId}:`, error)
  }
}

// Ajouter cette fonction de d√©bogage pour voir les r√©ponses API
const logApiResponse = (endpoint, data) => {
  console.log(`[API] R√©ponse de ${endpoint}:`, JSON.stringify(data, null, 2))
  return data
}

/**
 * Force la v√©rification de la connectivit√© r√©seau
 * @returns {Promise<boolean>} - √âtat de la connectivit√©
 */
async function forceNetworkCheck() {
  try {
    console.log("[API] üîÑ V√©rification forc√©e de la connectivit√© r√©seau")

    const controller = new AbortController()
    const timeoutId = setTimeout(() => controller.abort(), 3000)

    const response = await fetch(`${API_BASE_URL}/health`, {
      method: "HEAD",
      signal: controller.signal,
      cache: "no-cache",
    })

    clearTimeout(timeoutId)

    const isConnected = response.ok
    console.log(`[API] üì° √âtat de la connectivit√©: ${isConnected ? "‚úÖ En ligne" : "‚ùå Hors ligne"}`)

    return isConnected
  } catch (error) {
    console.log(`[API] üì° √âtat de la connectivit√©: ‚ùå Hors ligne (${error.message})`)
    return false
  }
}

/**
 * Fonction de d√©bogage pour inspecter l'historique local
 * @param {string} treeId - ID de l'arbre
 * @returns {Promise<Object>} - Informations de d√©bogage
 */
async function debugHistory(treeId) {
  try {
    console.log(`[API] üîç D√©bogage de l'historique pour l'arbre ${treeId}`)

    const historyKey = `${HISTORY_PREFIX}${treeId}`
    const rawData = await AsyncStorage.getItem(historyKey)

    const debugInfo = {
      treeId,
      historyKey,
      hasLocalData: !!rawData,
      rawDataLength: rawData ? rawData.length : 0,
      timestamp: new Date().toISOString(),
    }

    if (rawData) {
      try {
        const parsedData = JSON.parse(rawData)
        debugInfo.parsedData = parsedData
        debugInfo.entriesCount = Array.isArray(parsedData) ? parsedData.length : 0
        debugInfo.dataType = Array.isArray(parsedData) ? "array" : typeof parsedData
      } catch (parseError) {
        debugInfo.parseError = parseError.message
        debugInfo.rawDataPreview = rawData.substring(0, 200)
      }
    }

    console.log(`[API] üìä Informations de d√©bogage pour l'arbre ${treeId}:`, debugInfo)
    return debugInfo
  } catch (error) {
    console.error(`[API] Erreur lors du d√©bogage de l'historique pour l'arbre ${treeId}:`, error)
    return { error: error.message, treeId }
  }
}

/**
 * Service API pour effectuer des requ√™tes HTTP
 */
const api = {
  /**
   * Effectue une requ√™te GET
   * @param {string} endpoint - Point de terminaison de l'API
   * @param {Object} options - Options suppl√©mentaires pour la requ√™te
   * @returns {Promise<Object>} - R√©ponse de l'API
   */
  get: async (endpoint, options = {}) => {
    try {
      const result = await request("GET", endpoint, null, options)

      // Mettre en cache les donn√©es si la requ√™te a r√©ussi
      if (result && !result._error && !result._queued) {
        await cacheData(endpoint, result)
      }

      return result
    } catch (error) {
      console.error(`[API] Erreur GET ${endpoint}:`, error)

      // Essayer de r√©cup√©rer depuis le cache en cas d'erreur
      const cachedData = await getCachedData(endpoint)
      if (cachedData) {
        console.log(`[API] Utilisation des donn√©es en cache pour ${endpoint}`)
        return { ...cachedData, _fromCache: true }
      }

      throw error
    }
  },

  /**
   * Effectue une requ√™te POST
   * @param {string} endpoint - Point de terminaison de l'API
   * @param {Object} data - Donn√©es √† envoyer
   * @param {Object} options - Options suppl√©mentaires pour la requ√™te
   * @returns {Promise<Object>} - R√©ponse de l'API
   */
  post: async (endpoint, data, options = {}) => {
    return await request("POST", endpoint, data, options)
  },

  /**
   * Effectue une requ√™te PUT
   * @param {string} endpoint - Point de terminaison de l'API
   * @param {Object} data - Donn√©es √† envoyer
   * @param {Object} options - Options suppl√©mentaires pour la requ√™te
   * @returns {Promise<Object>} - R√©ponse de l'API
   */
  put: async (endpoint, data, options = {}) => {
    return await request("PUT", endpoint, data, options)
  },

  /**
   * Effectue une requ√™te DELETE
   * @param {string} endpoint - Point de terminaison de l'API
   * @param {Object} options - Options suppl√©mentaires pour la requ√™te
   * @returns {Promise<Object>} - R√©ponse de l'API
   */
  delete: async (endpoint, options = {}) => {
    return await request("DELETE", endpoint, null, options)
  },

  /**
   * R√©cup√®re l'√©tat de la synchronisation
   * @returns {Promise<Object>} - √âtat de la synchronisation
   */
  getSyncStatus: async () => {
    try {
      const queue = await getOfflineQueue()
      return {
        pendingRequests: queue ? queue.length : 0,
        lastSync: await AsyncStorage.getItem("lastSyncTimestamp"),
      }
    } catch (error) {
      console.error("[API] Erreur lors de la r√©cup√©ration de l'√©tat de synchronisation:", error)
      return { pendingRequests: 0, lastSync: null }
    }
  },

  /**
   * Synchronise les requ√™tes en attente
   * @returns {Promise<Object>} - R√©sultat de la synchronisation
   */
  syncPendingRequests: async () => {
    try {
      const online = await isOnline()
      if (!online) {
        return { success: false, message: "Hors ligne" }
      }

      const queue = await getOfflineQueue()
      if (!queue || queue.length === 0) {
        return { success: true, processed: 0 }
      }

      let processed = 0
      let failed = 0

      for (const item of queue) {
        try {
          await request(item.method, item.url, item.data, item.options)
          await removeFromOfflineQueue(item.entityId)
          processed++
        } catch (error) {
          console.error("[API] Erreur lors de la synchronisation:", error)
          failed++
        }
      }

      await AsyncStorage.setItem("lastSyncTimestamp", new Date().toISOString())

      return {
        success: failed === 0,
        processed,
        failed,
        remaining: failed,
      }
    } catch (error) {
      console.error("[API] Erreur lors de la synchronisation:", error)
      return { success: false, message: error.message }
    }
  },

  /**
   * Teste la connectivit√© avec l'API
   * @returns {Promise<Object>} - R√©sultat du test
   */
  testConnection: async () => {
    try {
      console.log("[API] Test de connectivit√©...")

      const controller = new AbortController()
      const timeoutId = setTimeout(() => controller.abort(), 5000)

      const response = await fetch(`${API_BASE_URL}/health`, {
        method: "GET",
        signal: controller.signal,
        headers: {
          "Content-Type": "application/json",
        },
      })

      clearTimeout(timeoutId)

      const result = {
        success: response.ok,
        status: response.status,
        url: API_BASE_URL,
        timestamp: new Date().toISOString(),
      }

      console.log("[API] R√©sultat du test de connectivit√©:", result)
      return result
    } catch (error) {
      console.error("[API] Erreur lors du test de connectivit√©:", error)
      return {
        success: false,
        error: error.message,
        url: API_BASE_URL,
        timestamp: new Date().toISOString(),
      }
    }
  },

  // Fonction pour ajouter l'historique avec les donn√©es de r√©colte
  addTreeHistoryEntry: async (treeId, historyEntry) => {
    try {
      console.log(`[API] üìù Ajout d'une entr√©e d'historique pour l'arbre ${treeId}`)
      console.log(`[API] üìä Donn√©es:`, historyEntry)

      // Pr√©parer les donn√©es pour l'API - inclure TOUS les champs directement
      const apiData = {
        date: historyEntry.date,
        height: historyEntry.height,
        diameter: historyEntry.diameter,
        health: historyEntry.health,
        notes: historyEntry.notes || "",
        oliveQuantity: historyEntry.oliveQuantity,
        oilQuantity: historyEntry.oilQuantity,
        images: historyEntry.images,
        observations: historyEntry.observations,
        recordedBy: historyEntry.recordedBy,
        timestamp: historyEntry.timestamp,
      }

      console.log(`[API] üì¶ Donn√©es format√©es pour l'API:`, apiData)

      // G√©n√©rer un ID unique pour cette entr√©e
      const entryId = `history_${treeId}_${Date.now()}`

      // Envoyer √† l'API
      const result = await request("POST", `/trees/${treeId}/history`, apiData, { entityId: entryId })

      console.log(`[API] üìã R√©ponse compl√®te de l'API:`, result)

      // V√©rifier si la requ√™te a vraiment r√©ussi (pas mise en file d'attente)
      if (result && !result._error && !result._queued && !result._pendingSync) {
        // V√©rifier si nous avons une r√©ponse positive du serveur
        if (result.success === true || result.message?.includes("succ√®s") || result.entry) {
          console.log(`[API] ‚úÖ Entr√©e d'historique ajout√©e avec succ√®s sur le serveur`)

          // Ajouter l'entr√©e au stockage local pour la synchronisation
          await addLocalHistoryEntry(treeId, {
            ...historyEntry,
            timestamp: historyEntry.timestamp || Date.now(),
            id: entryId,
            isOffline: false, // Marquer comme en ligne
            synced: true, // Marquer comme synchronis√©
          })

          return {
            success: true,
            message: "Entr√©e ajout√©e avec succ√®s",
            entry: {
              ...historyEntry,
              id: entryId,
              isOffline: false,
              synced: true,
            },
            online: true,
          }
        }
      }

      // Si la requ√™te a √©t√© mise en file d'attente (mode hors ligne)
      if (result._queued || result._pendingSync) {
        console.log(`[API] üì¥ Entr√©e mise en file d'attente pour synchronisation ult√©rieure`)

        await addLocalHistoryEntry(treeId, {
          ...historyEntry,
          timestamp: historyEntry.timestamp || Date.now(),
          id: entryId,
          isOffline: true,
          synced: false,
        })

        return {
          success: true,
          message: "Entr√©e ajout√©e en mode hors ligne",
          entry: {
            ...historyEntry,
            id: entryId,
            isOffline: true,
            synced: false,
          },
          online: false,
        }
      }

      // En cas d'erreur API
      console.error(`[API] ‚ùå Erreur lors de l'ajout de l'entr√©e d'historique:`, result)

      // Essayer d'ajouter localement malgr√© l'erreur API
      await addLocalHistoryEntry(treeId, {
        ...historyEntry,
        timestamp: historyEntry.timestamp || Date.now(),
        id: entryId,
        isOffline: true,
        synced: false,
        error: result.message,
      })

      return {
        success: false,
        message: result.message || "Erreur lors de l'ajout de l'entr√©e d'historique",
        error: result,
        online: false,
      }
    } catch (error) {
      console.error(`[API] üí• Erreur lors de l'ajout de l'entr√©e d'historique:`, error)

      // En cas d'erreur, essayer d'ajouter localement
      const entryId = `history_${treeId}_${Date.now()}`
      await addLocalHistoryEntry(treeId, {
        ...historyEntry,
        timestamp: historyEntry.timestamp || Date.now(),
        id: entryId,
        isOffline: true,
        synced: false,
        error: error.message,
      })

      return {
        success: false,
        message: "Erreur lors de l'ajout de l'entr√©e d'historique, mais sauvegard√©e localement",
        error: error.message,
        online: false,
      }
    }
  },

  // Fonction pour r√©cup√©rer l'historique (MODIFI√âE)
  getTreeHistory: async (treeId, year = null, forceRefresh = false) => {
    try {
      console.log(
        `[API] üìö R√©cup√©ration de l'historique pour l'arbre ${treeId}${year ? ` (ann√©e ${year})` : ""}${forceRefresh ? " (rafra√Æchissement forc√©)" : ""}`,
      )

      // Construire l'endpoint
      let endpoint = `/trees/${treeId}/history`
      if (year) {
        endpoint += `?year=${year}`
      }

      // Si forceRefresh est true, ignorer le cache
      if (forceRefresh) {
        console.log(`[API] üîÑ Rafra√Æchissement forc√©, ignorer le cache`)
        const cacheKey = `${CACHE_PREFIX}${endpoint.replace(/[^a-zA-Z0-9]/g, "_")}`
        await AsyncStorage.removeItem(cacheKey)
      }

      // V√©rifier la connectivit√©
      const isConnected = await forceNetworkCheck()
      console.log(`[API] üåê Connectivit√© r√©seau: ${isConnected ? "En ligne" : "Hors ligne"}`)

      // Essayer de r√©cup√©rer depuis l'API si en ligne
      if (isConnected) {
        const result = await request("GET", endpoint, null, { entityId: `history_${treeId}_${year || "all"}` })

        console.log(`[API] üìã R√©ponse brute de l'API:`, JSON.stringify(result, null, 2))

        // Si la requ√™te a r√©ussi
        if (result && !result._error && !result._queued) {
          console.log(`[API] ‚úÖ Historique r√©cup√©r√© avec succ√®s pour l'arbre ${treeId}`)

          // Analyser la structure de la r√©ponse
          let historyData = result

          // G√©rer diff√©rents formats de r√©ponse API
          if (result.history) {
            historyData = result.history
            console.log(`[API] üì¶ Historique trouv√© dans result.history`)
          } else if (result.data) {
            historyData = result.data
            console.log(`[API] üì¶ Historique trouv√© dans result.data`)
          } else if (Array.isArray(result)) {
            historyData = result
            console.log(`[API] üì¶ Historique est un tableau direct`)
          }

          console.log(`[API] üìä Structure de l'historique:`, {
            type: typeof historyData,
            isArray: Array.isArray(historyData),
            length: Array.isArray(historyData) ? historyData.length : "N/A",
            keys: typeof historyData === "object" ? Object.keys(historyData) : "N/A",
          })

          // Mettre √† jour le cache local avec les bonnes donn√©es
          if (Array.isArray(historyData)) {
            await saveLocalHistory(treeId, historyData)
            return historyData
          } else if (historyData && typeof historyData === "object") {
            await saveLocalHistory(treeId, historyData)
            return historyData
          }
        }
      }

      // En cas d'erreur ou mode hors ligne, utiliser les donn√©es locales
      console.log(`[API] üîç Recherche de l'historique local pour l'arbre ${treeId}`)

      // D√©boguer l'historique local
      const debugInfo = await debugHistory(treeId)
      console.log(`[API] üîß Informations de d√©bogage:`, debugInfo)

      const localHistory = await getLocalHistory(treeId, year)

      if (
        localHistory &&
        (Array.isArray(localHistory) ? localHistory.length > 0 : Object.keys(localHistory).length > 0)
      ) {
        console.log(`[API] üíæ Historique local trouv√© pour l'arbre ${treeId}`)
        console.log(`[API] üìä Contenu de l'historique local:`, localHistory)

        return { ...localHistory, _fromLocal: true }
      }

      // Aucune donn√©e disponible
      console.log(`[API] ‚ùå Aucun historique disponible pour l'arbre ${treeId}`)
      return {}
    } catch (error) {
      console.error(`[API] üí• Erreur lors de la r√©cup√©ration de l'historique pour l'arbre ${treeId}:`, error)

      // Essayer de r√©cup√©rer depuis le stockage local en cas d'erreur
      const localHistory = await getLocalHistory(treeId, year)
      if (localHistory) {
        return { ...localHistory, _fromLocal: true, _error: false }
      }

      return { _error: true, message: error.message || "Impossible de r√©cup√©rer l'historique" }
    }
  },

  /**
   * Supprime une entr√©e de l'historique d'un arbre
   * @param {string} treeId - ID de l'arbre
   * @param {string} year - Ann√©e de l'entr√©e
   * @param {string} timestamp - Timestamp de l'entr√©e
   * @returns {Promise<Object>} - R√©sultat de l'op√©ration
   */
  deleteTreeHistoryEntry: async (treeId, year, timestamp) => {
    try {
      console.log(`[API] üóëÔ∏è Suppression de l'entr√©e d'historique ${timestamp} pour l'arbre ${treeId} (ann√©e ${year})`)

      // Envoyer √† l'API
      const result = await request("DELETE", `/trees/${treeId}/history/${year}/${timestamp}`, null, {
        entityId: `delete_history_${treeId}_${year}_${timestamp}`,
      })

      // Si la requ√™te a r√©ussi ou a √©t√© mise en file d'attente
      if (!result._error || result._queued) {
        console.log(
          `[API] ‚úÖ Entr√©e d'historique ${result._queued ? "marqu√©e pour suppression" : "supprim√©e"} avec succ√®s`,
        )

        // Supprimer l'entr√©e du stockage local
        await removeLocalHistoryEntry(treeId, year, timestamp)

        return {
          success: true,
          message: result._queued ? "Entr√©e marqu√©e pour suppression (hors ligne)" : "Entr√©e supprim√©e avec succ√®s",
        }
      }

      // En cas d'erreur
      console.error(`[API] ‚ùå Erreur lors de la suppression de l'entr√©e d'historique:`, result)
      return {
        success: false,
        message: result.message || "Erreur lors de la suppression de l'entr√©e d'historique",
      }
    } catch (error) {
      console.error(`[API] üí• Erreur lors de la suppression de l'entr√©e d'historique:`, error)
      return {
        success: false,
        message: "Erreur lors de la suppression de l'entr√©e d'historique",
        error: error.message,
      }
    }
  },

  /**
   * R√©cup√®re les projets de l'utilisateur connect√©
   * @param {Object} options - Options de filtrage (optionnel)
   * @returns {Promise<Object>} - Liste des projets
   */
  getUserProjects: async (options = {}) => {
    try {
      console.log("[API] üìã R√©cup√©ration des projets de l'utilisateur")

      // Construire l'endpoint avec les param√®tres de filtrage
      let endpoint = "/projects"
      const params = new URLSearchParams()

      if (options.status) params.append("status", options.status)
      if (options.limit) params.append("limit", options.limit)
      if (options.offset) params.append("offset", options.offset)

      if (params.toString()) {
        endpoint += `?${params.toString()}`
      }

      const result = await request("GET", endpoint, null, { entityId: "user_projects" })

      // Si la requ√™te a r√©ussi
      if (result && !result._error && !result._queued) {
        console.log(`[API] ‚úÖ ${result.length || 0} projets r√©cup√©r√©s`)

        // Mettre en cache les projets
        await cacheUserProjects(result)

        return {
          success: true,
          projects: result,
          fromCache: false,
        }
      }

      // En cas d'erreur, essayer le cache local
      const cachedProjects = await getCachedUserProjects()
      if (cachedProjects) {
        console.log("[API] üíæ Utilisation des projets en cache")
        return {
          success: true,
          projects: cachedProjects,
          fromCache: true,
        }
      }

      return {
        success: false,
        message: "Aucun projet disponible",
        projects: [],
      }
    } catch (error) {
      console.error("[API] Erreur lors de la r√©cup√©ration des projets:", error)

      // Essayer le cache en cas d'erreur
      const cachedProjects = await getCachedUserProjects()
      if (cachedProjects) {
        return {
          success: true,
          projects: cachedProjects,
          fromCache: true,
          error: error.message,
        }
      }

      return {
        success: false,
        message: error.message || "Erreur lors de la r√©cup√©ration des projets",
        projects: [],
      }
    }
  },

  /**
   * R√©cup√®re les d√©tails d'un projet sp√©cifique
   * @param {string} projectId - ID du projet
   * @returns {Promise<Object>} - D√©tails du projet
   */
  getProjectDetails: async (projectId) => {
    try {
      console.log(`[API] üìÑ R√©cup√©ration des d√©tails du projet ${projectId}`)

      const result = await request("GET", `/projects/${projectId}`, null, {
        entityId: `project_${projectId}`,
      })

      if (result && !result._error && !result._queued) {
        console.log(`[API] ‚úÖ D√©tails du projet ${projectId} r√©cup√©r√©s`)

        // Mettre en cache les d√©tails du projet
        await cacheProjectDetails(projectId, result)

        return {
          success: true,
          project: result,
          fromCache: false,
        }
      }

      // Essayer le cache local
      const cachedProject = await getCachedProjectDetails(projectId)
      if (cachedProject) {
        console.log(`[API] üíæ D√©tails du projet ${projectId} trouv√©s en cache`)
        return {
          success: true,
          project: cachedProject,
          fromCache: true,
        }
      }

      return {
        success: false,
        message: `Projet ${projectId} non trouv√©`,
      }
    } catch (error) {
      console.error(`[API] Erreur lors de la r√©cup√©ration du projet ${projectId}:`, error)

      // Essayer le cache
      const cachedProject = await getCachedProjectDetails(projectId)
      if (cachedProject) {
        return {
          success: true,
          project: cachedProject,
          fromCache: true,
          error: error.message,
        }
      }

      return {
        success: false,
        message: error.message || "Erreur lors de la r√©cup√©ration du projet",
      }
    }
  },

  /**
   * R√©cup√®re les arbres d'un projet
   * @param {string} projectId - ID du projet
   * @returns {Promise<Object>} - Liste des arbres du projet
   */
  getProjectTrees: async (projectId) => {
    try {
      console.log(`[API] üå≥ R√©cup√©ration des arbres du projet ${projectId}`)

      const result = await request("GET", `/projects/${projectId}/trees`, null, {
        entityId: `project_trees_${projectId}`,
      })

      if (result && !result._error && !result._queued) {
        console.log(`[API] ‚úÖ ${result.length || 0} arbres r√©cup√©r√©s pour le projet ${projectId}`)

        // Mettre en cache les arbres du projet
        await cacheProjectTrees(projectId, result)

        return {
          success: true,
          trees: result,
          fromCache: false,
        }
      }

      // Essayer le cache local
      const cachedTrees = await getCachedProjectTrees(projectId)
      if (cachedTrees) {
        console.log(`[API] üíæ Arbres du projet ${projectId} trouv√©s en cache`)
        return {
          success: true,
          trees: cachedTrees,
          fromCache: true,
        }
      }

      return {
        success: false,
        message: `Aucun arbre trouv√© pour le projet ${projectId}`,
        trees: [],
      }
    } catch (error) {
      console.error(`[API] Erreur lors de la r√©cup√©ration des arbres du projet ${projectId}:`, error)

      // Essayer le cache
      const cachedTrees = await getCachedProjectTrees(projectId)
      if (cachedTrees) {
        return {
          success: true,
          trees: cachedTrees,
          fromCache: true,
          error: error.message,
        }
      }

      return {
        success: false,
        message: error.message || "Erreur lors de la r√©cup√©ration des arbres",
        trees: [],
      }
    }
  },

  /**
   * Cr√©e un nouveau projet
   * @param {Object} projectData - Donn√©es du projet
   * @returns {Promise<Object>} - R√©sultat de la cr√©ation
   */
  createProject: async (projectData) => {
    try {
      console.log("[API] ‚ûï Cr√©ation d'un nouveau projet")
      console.log("[API] üìä Donn√©es du projet:", projectData)

      const result = await request("POST", "/projects", projectData, {
        entityId: `create_project_${Date.now()}`,
      })

      if (result && !result._error && !result._queued && !result._pendingSync) {
        console.log("[API] ‚úÖ Projet cr√©√© avec succ√®s")

        // Invalider le cache des projets pour forcer un rechargement
        await invalidateUserProjectsCache()

        return {
          success: true,
          message: "Projet cr√©√© avec succ√®s",
          project: result,
          online: true,
        }
      }

      if (result._queued || result._pendingSync) {
        console.log("[API] üì¥ Cr√©ation de projet mise en file d'attente")
        return {
          success: true,
          message: "Projet cr√©√© en mode hors ligne",
          online: false,
        }
      }

      return {
        success: false,
        message: result.message || "Erreur lors de la cr√©ation du projet",
      }
    } catch (error) {
      console.error("[API] Erreur lors de la cr√©ation du projet:", error)
      return {
        success: false,
        message: error.message || "Erreur lors de la cr√©ation du projet",
      }
    }
  },
}

/**
 * Met en cache les projets de l'utilisateur
 * @param {Array} projects - Liste des projets
 */
async function cacheUserProjects(projects) {
  try {
    const cacheKey = "user_projects"
    const cacheEntry = {
      data: projects,
      timestamp: Date.now(),
    }
    await AsyncStorage.setItem(`${CACHE_PREFIX}${cacheKey}`, JSON.stringify(cacheEntry))
    console.log("[API] üíæ Projets utilisateur mis en cache")
  } catch (error) {
    console.error("[API] Erreur lors de la mise en cache des projets:", error)
  }
}

/**
 * R√©cup√®re les projets en cache
 * @returns {Array|null} - Projets en cache ou null
 */
async function getCachedUserProjects() {
  try {
    const cacheKey = "user_projects"
    const cachedEntry = await AsyncStorage.getItem(`${CACHE_PREFIX}${cacheKey}`)

    if (cachedEntry) {
      const parsed = JSON.parse(cachedEntry)
      const age = Date.now() - parsed.timestamp
      const maxAge = 30 * 60 * 1000 // 30 minutes

      if (age < maxAge) {
        return parsed.data
      } else {
        await AsyncStorage.removeItem(`${CACHE_PREFIX}${cacheKey}`)
      }
    }

    return null
  } catch (error) {
    console.error("[API] Erreur lors de la r√©cup√©ration des projets en cache:", error)
    return null
  }
}

/**
 * Met en cache les d√©tails d'un projet
 * @param {string} projectId - ID du projet
 * @param {Object} project - D√©tails du projet
 */
async function cacheProjectDetails(projectId, project) {
  try {
    const cacheKey = `project_details_${projectId}`
    const cacheEntry = {
      data: project,
      timestamp: Date.now(),
    }
    await AsyncStorage.setItem(`${CACHE_PREFIX}${cacheKey}`, JSON.stringify(cacheEntry))
    console.log(`[API] üíæ D√©tails du projet ${projectId} mis en cache`)
  } catch (error) {
    console.error(`[API] Erreur lors de la mise en cache du projet ${projectId}:`, error)
  }
}

/**
 * R√©cup√®re les d√©tails d'un projet en cache
 * @param {string} projectId - ID du projet
 * @returns {Object|null} - D√©tails du projet ou null
 */
async function getCachedProjectDetails(projectId) {
  try {
    const cacheKey = `project_details_${projectId}`
    const cachedEntry = await AsyncStorage.getItem(`${CACHE_PREFIX}${cacheKey}`)

    if (cachedEntry) {
      const parsed = JSON.parse(cachedEntry)
      const age = Date.now() - parsed.timestamp
      const maxAge = 60 * 60 * 1000 // 1 heure

      if (age < maxAge) {
        return parsed.data
      } else {
        await AsyncStorage.removeItem(`${CACHE_PREFIX}${cacheKey}`)
      }
    }

    return null
  } catch (error) {
    console.error(`[API] Erreur lors de la r√©cup√©ration du projet ${projectId} en cache:`, error)
    return null
  }
}

/**
 * Met en cache les arbres d'un projet
 * @param {string} projectId - ID du projet
 * @param {Array} trees - Liste des arbres
 */
async function cacheProjectTrees(projectId, trees) {
  try {
    const cacheKey = `project_trees_${projectId}`
    const cacheEntry = {
      data: trees,
      timestamp: Date.now(),
    }
    await AsyncStorage.setItem(`${CACHE_PREFIX}${cacheKey}`, JSON.stringify(cacheEntry))
    console.log(`[API] üíæ Arbres du projet ${projectId} mis en cache`)
  } catch (error) {
    console.error(`[API] Erreur lors de la mise en cache des arbres du projet ${projectId}:`, error)
  }
}

/**
 * R√©cup√®re les arbres d'un projet en cache
 * @param {string} projectId - ID du projet
 * @returns {Array|null} - Arbres du projet ou null
 */
async function getCachedProjectTrees(projectId) {
  try {
    const cacheKey = `project_trees_${projectId}`
    const cachedEntry = await AsyncStorage.getItem(`${CACHE_PREFIX}${cacheKey}`)

    if (cachedEntry) {
      const parsed = JSON.parse(cachedEntry)
      const age = Date.now() - parsed.timestamp
      const maxAge = 30 * 60 * 1000 // 30 minutes

      if (age < maxAge) {
        return parsed.data
      } else {
        await AsyncStorage.removeItem(`${CACHE_PREFIX}${cacheKey}`)
      }
    }

    return null
  } catch (error) {
    console.error(`[API] Erreur lors de la r√©cup√©ration des arbres du projet ${projectId} en cache:`, error)
    return null
  }
}

/**
 * Invalide le cache des projets utilisateur
 */
async function invalidateUserProjectsCache() {
  try {
    const cacheKey = "user_projects"
    await AsyncStorage.removeItem(`${CACHE_PREFIX}${cacheKey}`)
    console.log("[API] üóëÔ∏è Cache des projets utilisateur invalid√©")
  } catch (error) {
    console.error("[API] Erreur lors de l'invalidation du cache des projets:", error)
  }
}

/**
 * Nettoie le cache d'historique pour un arbre sp√©cifique
 * @param {string} treeId - ID de l'arbre
 * @returns {Promise<boolean>} - Succ√®s de l'op√©ration
 */
async function clearHistoryCache(treeId) {
  try {
    const historyKey = `${HISTORY_PREFIX}${treeId}`
    await AsyncStorage.removeItem(historyKey)
    console.log(`[API] üßπ Cache d'historique nettoy√© pour l'arbre ${treeId}`)
    return true
  } catch (error) {
    console.error(`[API] Erreur lors du nettoyage du cache d'historique pour l'arbre ${treeId}:`, error)
    return false
  }
}

export default api
